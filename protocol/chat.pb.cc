// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chat {

namespace {

const ::google::protobuf::Descriptor* msg_chat_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_chat_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_chat_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_chat_reply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_chat_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_chat_2eproto() {
  protobuf_AddDesc_chat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chat.proto");
  GOOGLE_CHECK(file != NULL);
  msg_chat_request_descriptor_ = file->message_type(0);
  static const int msg_chat_request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_chat_request, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_chat_request, from_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_chat_request, to_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_chat_request, msg_),
  };
  msg_chat_request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      msg_chat_request_descriptor_,
      msg_chat_request::internal_default_instance(),
      msg_chat_request_offsets_,
      -1,
      -1,
      -1,
      sizeof(msg_chat_request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_chat_request, _internal_metadata_));
  msg_chat_reply_descriptor_ = file->message_type(1);
  static const int msg_chat_reply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_chat_reply, from_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_chat_reply, to_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_chat_reply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_chat_reply, msg_),
  };
  msg_chat_reply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      msg_chat_reply_descriptor_,
      msg_chat_reply::internal_default_instance(),
      msg_chat_reply_offsets_,
      -1,
      -1,
      -1,
      sizeof(msg_chat_reply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_chat_reply, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      msg_chat_request_descriptor_, msg_chat_request::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      msg_chat_reply_descriptor_, msg_chat_reply::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chat_2eproto() {
  msg_chat_request_default_instance_.Shutdown();
  delete msg_chat_request_reflection_;
  msg_chat_reply_default_instance_.Shutdown();
  delete msg_chat_reply_reflection_;
}

void protobuf_InitDefaults_chat_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  msg_chat_request_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  msg_chat_reply_default_instance_.DefaultConstruct();
  msg_chat_request_default_instance_.get_mutable()->InitAsDefaultInstance();
  msg_chat_reply_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_chat_2eproto_once_);
void protobuf_InitDefaults_chat_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_chat_2eproto_once_,
                 &protobuf_InitDefaults_chat_2eproto_impl);
}
void protobuf_AddDesc_chat_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_chat_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nchat.proto\022\004chat\"Q\n\020msg_chat_request\022\016"
    "\n\006device\030\001 \001(\005\022\020\n\010from_uid\030\002 \001(\005\022\016\n\006to_u"
    "id\030\003 \001(\005\022\013\n\003msg\030\004 \001(\t\"O\n\016msg_chat_reply\022"
    "\020\n\010from_uid\030\001 \001(\005\022\016\n\006to_uid\030\002 \001(\005\022\016\n\006res"
    "ult\030\003 \001(\005\022\013\n\003msg\030\004 \001(\tb\006proto3", 190);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chat_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_chat_2eproto_once_);
void protobuf_AddDesc_chat_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_chat_2eproto_once_,
                 &protobuf_AddDesc_chat_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chat_2eproto {
  StaticDescriptorInitializer_chat_2eproto() {
    protobuf_AddDesc_chat_2eproto();
  }
} static_descriptor_initializer_chat_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_chat_request::kDeviceFieldNumber;
const int msg_chat_request::kFromUidFieldNumber;
const int msg_chat_request::kToUidFieldNumber;
const int msg_chat_request::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_chat_request::msg_chat_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.msg_chat_request)
}

void msg_chat_request::InitAsDefaultInstance() {
}

msg_chat_request::msg_chat_request(const msg_chat_request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.msg_chat_request)
}

void msg_chat_request::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_, 0, reinterpret_cast<char*>(&to_uid_) -
    reinterpret_cast<char*>(&device_) + sizeof(to_uid_));
  _cached_size_ = 0;
}

msg_chat_request::~msg_chat_request() {
  // @@protoc_insertion_point(destructor:chat.msg_chat_request)
  SharedDtor();
}

void msg_chat_request::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void msg_chat_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_chat_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_chat_request_descriptor_;
}

const msg_chat_request& msg_chat_request::default_instance() {
  protobuf_InitDefaults_chat_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<msg_chat_request> msg_chat_request_default_instance_;

msg_chat_request* msg_chat_request::New(::google::protobuf::Arena* arena) const {
  msg_chat_request* n = new msg_chat_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void msg_chat_request::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.msg_chat_request)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(msg_chat_request, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<msg_chat_request*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(device_, to_uid_);
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool msg_chat_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.msg_chat_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 device = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from_uid;
        break;
      }

      // optional int32 from_uid = 2;
      case 2: {
        if (tag == 16) {
         parse_from_uid:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_to_uid;
        break;
      }

      // optional int32 to_uid = 3;
      case 3: {
        if (tag == 24) {
         parse_to_uid:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // optional string msg = 4;
      case 4: {
        if (tag == 34) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.msg_chat_request.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.msg_chat_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.msg_chat_request)
  return false;
#undef DO_
}

void msg_chat_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.msg_chat_request)
  // optional int32 device = 1;
  if (this->device() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->device(), output);
  }

  // optional int32 from_uid = 2;
  if (this->from_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->from_uid(), output);
  }

  // optional int32 to_uid = 3;
  if (this->to_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->to_uid(), output);
  }

  // optional string msg = 4;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.msg_chat_request.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.msg_chat_request)
}

::google::protobuf::uint8* msg_chat_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.msg_chat_request)
  // optional int32 device = 1;
  if (this->device() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->device(), target);
  }

  // optional int32 from_uid = 2;
  if (this->from_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->from_uid(), target);
  }

  // optional int32 to_uid = 3;
  if (this->to_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->to_uid(), target);
  }

  // optional string msg = 4;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.msg_chat_request.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.msg_chat_request)
  return target;
}

size_t msg_chat_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.msg_chat_request)
  size_t total_size = 0;

  // optional int32 device = 1;
  if (this->device() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->device());
  }

  // optional int32 from_uid = 2;
  if (this->from_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->from_uid());
  }

  // optional int32 to_uid = 3;
  if (this->to_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->to_uid());
  }

  // optional string msg = 4;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_chat_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.msg_chat_request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const msg_chat_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_chat_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.msg_chat_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.msg_chat_request)
    UnsafeMergeFrom(*source);
  }
}

void msg_chat_request::MergeFrom(const msg_chat_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.msg_chat_request)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void msg_chat_request::UnsafeMergeFrom(const msg_chat_request& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.device() != 0) {
    set_device(from.device());
  }
  if (from.from_uid() != 0) {
    set_from_uid(from.from_uid());
  }
  if (from.to_uid() != 0) {
    set_to_uid(from.to_uid());
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void msg_chat_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.msg_chat_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_chat_request::CopyFrom(const msg_chat_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.msg_chat_request)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool msg_chat_request::IsInitialized() const {

  return true;
}

void msg_chat_request::Swap(msg_chat_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_chat_request::InternalSwap(msg_chat_request* other) {
  std::swap(device_, other->device_);
  std::swap(from_uid_, other->from_uid_);
  std::swap(to_uid_, other->to_uid_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata msg_chat_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_chat_request_descriptor_;
  metadata.reflection = msg_chat_request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// msg_chat_request

// optional int32 device = 1;
void msg_chat_request::clear_device() {
  device_ = 0;
}
::google::protobuf::int32 msg_chat_request::device() const {
  // @@protoc_insertion_point(field_get:chat.msg_chat_request.device)
  return device_;
}
void msg_chat_request::set_device(::google::protobuf::int32 value) {
  
  device_ = value;
  // @@protoc_insertion_point(field_set:chat.msg_chat_request.device)
}

// optional int32 from_uid = 2;
void msg_chat_request::clear_from_uid() {
  from_uid_ = 0;
}
::google::protobuf::int32 msg_chat_request::from_uid() const {
  // @@protoc_insertion_point(field_get:chat.msg_chat_request.from_uid)
  return from_uid_;
}
void msg_chat_request::set_from_uid(::google::protobuf::int32 value) {
  
  from_uid_ = value;
  // @@protoc_insertion_point(field_set:chat.msg_chat_request.from_uid)
}

// optional int32 to_uid = 3;
void msg_chat_request::clear_to_uid() {
  to_uid_ = 0;
}
::google::protobuf::int32 msg_chat_request::to_uid() const {
  // @@protoc_insertion_point(field_get:chat.msg_chat_request.to_uid)
  return to_uid_;
}
void msg_chat_request::set_to_uid(::google::protobuf::int32 value) {
  
  to_uid_ = value;
  // @@protoc_insertion_point(field_set:chat.msg_chat_request.to_uid)
}

// optional string msg = 4;
void msg_chat_request::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& msg_chat_request::msg() const {
  // @@protoc_insertion_point(field_get:chat.msg_chat_request.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void msg_chat_request::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.msg_chat_request.msg)
}
void msg_chat_request::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.msg_chat_request.msg)
}
void msg_chat_request::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.msg_chat_request.msg)
}
::std::string* msg_chat_request::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:chat.msg_chat_request.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* msg_chat_request::release_msg() {
  // @@protoc_insertion_point(field_release:chat.msg_chat_request.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void msg_chat_request::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:chat.msg_chat_request.msg)
}

inline const msg_chat_request* msg_chat_request::internal_default_instance() {
  return &msg_chat_request_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_chat_reply::kFromUidFieldNumber;
const int msg_chat_reply::kToUidFieldNumber;
const int msg_chat_reply::kResultFieldNumber;
const int msg_chat_reply::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_chat_reply::msg_chat_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.msg_chat_reply)
}

void msg_chat_reply::InitAsDefaultInstance() {
}

msg_chat_reply::msg_chat_reply(const msg_chat_reply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.msg_chat_reply)
}

void msg_chat_reply::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_uid_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&from_uid_) + sizeof(result_));
  _cached_size_ = 0;
}

msg_chat_reply::~msg_chat_reply() {
  // @@protoc_insertion_point(destructor:chat.msg_chat_reply)
  SharedDtor();
}

void msg_chat_reply::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void msg_chat_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_chat_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_chat_reply_descriptor_;
}

const msg_chat_reply& msg_chat_reply::default_instance() {
  protobuf_InitDefaults_chat_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<msg_chat_reply> msg_chat_reply_default_instance_;

msg_chat_reply* msg_chat_reply::New(::google::protobuf::Arena* arena) const {
  msg_chat_reply* n = new msg_chat_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void msg_chat_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.msg_chat_reply)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(msg_chat_reply, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<msg_chat_reply*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(from_uid_, result_);
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool msg_chat_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.msg_chat_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 from_uid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_uid;
        break;
      }

      // optional int32 to_uid = 2;
      case 2: {
        if (tag == 16) {
         parse_to_uid:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // optional string msg = 4;
      case 4: {
        if (tag == 34) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.msg_chat_reply.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.msg_chat_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.msg_chat_reply)
  return false;
#undef DO_
}

void msg_chat_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.msg_chat_reply)
  // optional int32 from_uid = 1;
  if (this->from_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->from_uid(), output);
  }

  // optional int32 to_uid = 2;
  if (this->to_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->to_uid(), output);
  }

  // optional int32 result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // optional string msg = 4;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.msg_chat_reply.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.msg_chat_reply)
}

::google::protobuf::uint8* msg_chat_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.msg_chat_reply)
  // optional int32 from_uid = 1;
  if (this->from_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->from_uid(), target);
  }

  // optional int32 to_uid = 2;
  if (this->to_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->to_uid(), target);
  }

  // optional int32 result = 3;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // optional string msg = 4;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.msg_chat_reply.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.msg_chat_reply)
  return target;
}

size_t msg_chat_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.msg_chat_reply)
  size_t total_size = 0;

  // optional int32 from_uid = 1;
  if (this->from_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->from_uid());
  }

  // optional int32 to_uid = 2;
  if (this->to_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->to_uid());
  }

  // optional int32 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  // optional string msg = 4;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_chat_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.msg_chat_reply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const msg_chat_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_chat_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.msg_chat_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.msg_chat_reply)
    UnsafeMergeFrom(*source);
  }
}

void msg_chat_reply::MergeFrom(const msg_chat_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.msg_chat_reply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void msg_chat_reply::UnsafeMergeFrom(const msg_chat_reply& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.from_uid() != 0) {
    set_from_uid(from.from_uid());
  }
  if (from.to_uid() != 0) {
    set_to_uid(from.to_uid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void msg_chat_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.msg_chat_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_chat_reply::CopyFrom(const msg_chat_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.msg_chat_reply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool msg_chat_reply::IsInitialized() const {

  return true;
}

void msg_chat_reply::Swap(msg_chat_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_chat_reply::InternalSwap(msg_chat_reply* other) {
  std::swap(from_uid_, other->from_uid_);
  std::swap(to_uid_, other->to_uid_);
  std::swap(result_, other->result_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata msg_chat_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_chat_reply_descriptor_;
  metadata.reflection = msg_chat_reply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// msg_chat_reply

// optional int32 from_uid = 1;
void msg_chat_reply::clear_from_uid() {
  from_uid_ = 0;
}
::google::protobuf::int32 msg_chat_reply::from_uid() const {
  // @@protoc_insertion_point(field_get:chat.msg_chat_reply.from_uid)
  return from_uid_;
}
void msg_chat_reply::set_from_uid(::google::protobuf::int32 value) {
  
  from_uid_ = value;
  // @@protoc_insertion_point(field_set:chat.msg_chat_reply.from_uid)
}

// optional int32 to_uid = 2;
void msg_chat_reply::clear_to_uid() {
  to_uid_ = 0;
}
::google::protobuf::int32 msg_chat_reply::to_uid() const {
  // @@protoc_insertion_point(field_get:chat.msg_chat_reply.to_uid)
  return to_uid_;
}
void msg_chat_reply::set_to_uid(::google::protobuf::int32 value) {
  
  to_uid_ = value;
  // @@protoc_insertion_point(field_set:chat.msg_chat_reply.to_uid)
}

// optional int32 result = 3;
void msg_chat_reply::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 msg_chat_reply::result() const {
  // @@protoc_insertion_point(field_get:chat.msg_chat_reply.result)
  return result_;
}
void msg_chat_reply::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:chat.msg_chat_reply.result)
}

// optional string msg = 4;
void msg_chat_reply::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& msg_chat_reply::msg() const {
  // @@protoc_insertion_point(field_get:chat.msg_chat_reply.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void msg_chat_reply::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.msg_chat_reply.msg)
}
void msg_chat_reply::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.msg_chat_reply.msg)
}
void msg_chat_reply::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.msg_chat_reply.msg)
}
::std::string* msg_chat_reply::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:chat.msg_chat_reply.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* msg_chat_reply::release_msg() {
  // @@protoc_insertion_point(field_release:chat.msg_chat_reply.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void msg_chat_reply::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:chat.msg_chat_reply.msg)
}

inline const msg_chat_reply* msg_chat_reply::internal_default_instance() {
  return &msg_chat_reply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

// @@protoc_insertion_point(global_scope)
